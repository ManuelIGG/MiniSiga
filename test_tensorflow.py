## ==================== test_tensorflow.py ====================
"""
Script de verificaci√≥n para probar la implementaci√≥n de TensorFlow en MiniSIGA.
Ejecutar este script antes de usar el sistema de predicci√≥n.
"""

import sys

def verificar_dependencias():
    """Verifica que todas las dependencias est√©n instaladas correctamente."""
    print("="*70)
    print("üîç VERIFICACI√ìN DE DEPENDENCIAS - MiniSIGA con TensorFlow")
    print("="*70)
    print()
    
    dependencias = {
        'tensorflow': '2.15.0',
        'sklearn': '1.3.2',
        'numpy': '1.24.3',
        'pandas': '2.1.3',
        'matplotlib': '3.8.2',
        'reportlab': '4.0.7'
    }
    
    errores = []
    
    # Verificar TensorFlow
    print("üì¶ Verificando TensorFlow...")
    try:
        import tensorflow as tf
        version_tf = tf.__version__
        print(f"   ‚úÖ TensorFlow {version_tf} instalado")
        
        # Verificar GPU
        gpus = tf.config.list_physical_devices('GPU')
        if gpus:
            print(f"   üéÆ GPU detectada: {len(gpus)} dispositivo(s)")
        else:
            print(f"   üíª Modo CPU (sin GPU detectada)")
    except ImportError:
        print("   ‚ùå TensorFlow NO instalado")
        errores.append("tensorflow")
    
    # Verificar scikit-learn
    print("\nüì¶ Verificando scikit-learn...")
    try:
        import sklearn
        print(f"   ‚úÖ scikit-learn {sklearn.__version__} instalado")
    except ImportError:
        print("   ‚ùå scikit-learn NO instalado")
        errores.append("scikit-learn")
    
    # Verificar numpy
    print("\nüì¶ Verificando NumPy...")
    try:
        import numpy as np
        print(f"   ‚úÖ NumPy {np.__version__} instalado")
    except ImportError:
        print("   ‚ùå NumPy NO instalado")
        errores.append("numpy")
    
    # Verificar pandas
    print("\nüì¶ Verificando Pandas...")
    try:
        import pandas as pd
        print(f"   ‚úÖ Pandas {pd.__version__} instalado")
    except ImportError:
        print("   ‚ùå Pandas NO instalado")
        errores.append("pandas")
    
    # Verificar matplotlib
    print("\nüì¶ Verificando Matplotlib...")
    try:
        import matplotlib
        print(f"   ‚úÖ Matplotlib {matplotlib.__version__} instalado")
    except ImportError:
        print("   ‚ùå Matplotlib NO instalado")
        errores.append("matplotlib")
    
    # Verificar reportlab
    print("\nüì¶ Verificando ReportLab...")
    try:
        import reportlab
        print(f"   ‚úÖ ReportLab instalado")
    except ImportError:
        print("   ‚ùå ReportLab NO instalado")
        errores.append("reportlab")
    
    # Verificar tkinter
    print("\nüì¶ Verificando Tkinter...")
    try:
        import tkinter
        print(f"   ‚úÖ Tkinter disponible")
    except ImportError:
        print("   ‚ùå Tkinter NO disponible")
        errores.append("tkinter")
    
    print("\n" + "="*70)
    
    if errores:
        print("‚ùå FALTAN DEPENDENCIAS\n")
        print("Instala las dependencias faltantes con:")
        print("pip install -r requirements.txt")
        print("\nO individualmente:")
        for dep in errores:
            if dep == "scikit-learn":
                print(f"   pip install {dep}")
            else:
                print(f"   pip install {dep}")
        return False
    else:
        print("‚úÖ TODAS LAS DEPENDENCIAS EST√ÅN INSTALADAS CORRECTAMENTE")
        return True


def test_modelo_basico():
    """Prueba b√°sica del modelo de predicci√≥n."""
    print("\n" + "="*70)
    print("üß™ PRUEBA DEL MODELO DE PREDICCI√ìN")
    print("="*70)
    print()
    
    try:
        # Importar clases necesarias
        from predictor import PredictorAcademico
        from modelo import ModeloSIGA
        
        print("üì• Creando modelo SIGA de prueba...")
        modelo = ModeloSIGA()
        
        # Crear datos de ejemplo
        print("üìù Agregando datos de prueba...")
        
        # Estudiantes
        modelo.crear_estudiante("1001", "Juan", "P√©rez", "juan@test.com", "2000-01-01")
        modelo.crear_estudiante("1002", "Mar√≠a", "Garc√≠a", "maria@test.com", "2000-02-02")
        modelo.crear_estudiante("1003", "Pedro", "L√≥pez", "pedro@test.com", "2000-03-03")
        modelo.crear_estudiante("1004", "Ana", "Mart√≠nez", "ana@test.com", "2000-04-04")
        modelo.crear_estudiante("1005", "Luis", "Rodr√≠guez", "luis@test.com", "2000-05-05")
        
        # Cursos
        modelo.crear_curso("MAT101", "Matem√°ticas I")
        modelo.crear_curso("PROG101", "Programaci√≥n I")
        
        # Matr√≠culas (mezcla de aprobados y reprobados)
        modelo.matricular_estudiante("1001", "MAT101", 4.5)
        modelo.matricular_estudiante("1001", "PROG101", 4.2)
        modelo.matricular_estudiante("1002", "MAT101", 2.8)
        modelo.matricular_estudiante("1002", "PROG101", 3.5)
        modelo.matricular_estudiante("1003", "MAT101", 4.0)
        modelo.matricular_estudiante("1003", "PROG101", 4.8)
        modelo.matricular_estudiante("1004", "MAT101", 2.5)
        modelo.matricular_estudiante("1004", "PROG101", 2.9)
        modelo.matricular_estudiante("1005", "MAT101", 3.8)
        modelo.matricular_estudiante("1005", "PROG101", 4.1)
        
        print(f"   ‚úÖ Creados {len(modelo.estudiantes)} estudiantes")
        print(f"   ‚úÖ Creados {len(modelo.cursos)} cursos")
        print(f"   ‚úÖ Creadas {len(modelo.matriculas)} matr√≠culas")
        
        # Crear predictor
        print("\nü§ñ Inicializando predictor...")
        predictor = PredictorAcademico()
        
        # Entrenar modelo
        print("üöÄ Entrenando modelo (esto puede tardar unos segundos)...")
        metricas = predictor.entrenar(modelo, epochs=50, verbose=0)
        
        print(f"\nüìä M√©tricas de entrenamiento:")
        print(f"   ‚Ä¢ Precisi√≥n: {metricas['val_accuracy']*100:.2f}%")
        print(f"   ‚Ä¢ Precision: {metricas['val_precision']*100:.2f}%")
        print(f"   ‚Ä¢ Recall: {metricas['val_recall']*100:.2f}%")
        print(f"   ‚Ä¢ √âpocas: {metricas['epochs_trained']}")
        
        # Realizar predicci√≥n de prueba
        print("\nüîÆ Realizando predicci√≥n de prueba...")
        resultado = predictor.predecir(modelo, "1001", "MAT101")
        
        print(f"\n   Estudiante: Juan P√©rez")
        print(f"   Curso: Matem√°ticas I")
        print(f"   Predicci√≥n: {resultado['prediccion']}")
        print(f"   Probabilidad: {resultado['probabilidad_aprobar']*100:.1f}%")
        print(f"   Confianza: {resultado['confianza']*100:.1f}%")
        
        # Guardar modelo
        print("\nüíæ Guardando modelo...")
        predictor.guardar_modelo()
        print("   ‚úÖ Modelo guardado en 'modelo_prediccion.h5'")
        
        print("\n" + "="*70)
        print("‚úÖ PRUEBA COMPLETADA EXITOSAMENTE")
        print("="*70)
        print("\nüí° El sistema de predicci√≥n est√° listo para usar en MiniSIGA")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LA PRUEBA:")
        print(f"   {str(e)}")
        print("\nVerifica que:")
        print("   1. El archivo predictor.py existe en el directorio")
        print("   2. El archivo modelo.py existe en el directorio")
        print("   3. Todas las dependencias est√°n instaladas")
        return False


def main():
    """Funci√≥n principal."""
    print("\nüöÄ INICIANDO VERIFICACI√ìN DEL SISTEMA\n")
    
    # Paso 1: Verificar dependencias
    if not verificar_dependencias():
        print("\n‚ö†Ô∏è  Instala las dependencias faltantes antes de continuar.")
        return False
    
    # Paso 2: Probar modelo
    print("\n¬øDeseas ejecutar una prueba del modelo de predicci√≥n? (s/n): ", end='')
    respuesta = input().strip().lower()
    
    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
        if not test_modelo_basico():
            print("\n‚ö†Ô∏è  La prueba del modelo fall√≥. Revisa los errores anteriores.")
            return False
    else:
        print("\n‚è≠Ô∏è  Prueba del modelo omitida.")
    
    print("\n" + "="*70)
    print("üéâ ¬°VERIFICACI√ìN COMPLETADA!")
    print("="*70)
    print("\n‚úÖ El sistema est√° listo para ejecutar MiniSIGA con predicci√≥n IA")
    print("\nüìù Pr√≥ximos pasos:")
    print("   1. Ejecuta: python main.py")
    print("   2. Ve a la pesta√±a 'ü§ñ Predicci√≥n IA'")
    print("   3. Entrena el modelo con tus datos reales")
    print("   4. ¬°Comienza a predecir el rendimiento acad√©mico!")
    print("\nüìñ Para m√°s informaci√≥n, consulta: INSTRUCCIONES_TENSORFLOW.md")
    print()
    
    return True


if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Verificaci√≥n interrumpida por el usuario.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        sys.exit(1)